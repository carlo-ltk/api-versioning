name: deploy

on:
  release:
    types: [published]

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      
      - name: Set Version variables
        id: version
        run: | 
          echo ${{ github.ref }} | sed -e "s/^refs\/tags\///"
          echo TAG=$(echo ${{ github.ref }} | sed -e "s/^refs\/tags\///")>> $GITHUB_OUTPUT
          echo COMMIT=${{ github.sha }} | cut -c 1-20 >> $GITHUB_OUTPUT

      - name: Output Version variables
        run: |
          echo "${{ steps.version.outputs.TAG }}"
          echo "${{ steps.version.outputs.COMMIT }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies 👨🏻‍💻
        run: npm ci
      
      - name: Serverless Deploy ${{ steps.version.outputs.COMMIT }}
        run: | 
          npm run serverless deploy -- --stage ${{ steps.version.outputs.COMMIT }}

      - name: Update versions SSM param
        id: update_versions
        run: |
          echo VERSIONS=$(aws ssm get-parameter --name fnd-api-s2-versions --query "Parameter.Value" --output text | jq '.  += [ { tag: "${{ steps.version.outputs.TAG }}", commit: "${{ steps.version.outputs.COMMIT }}" }]')  >> $GITHUB_OUTPUT

      - name: Store updated versions in SSM param
        run: |
          aws ssm put-parameter --name fnd-api-s2-versions --overwrite --value '${{ steps.update_versions.outputs.VERSIONS }}'

      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Terraform apply
        run: |
          npm run terraform -- init
          npm run terraform -- apply --auto-approve
          npm run terraform -- output