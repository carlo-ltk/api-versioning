name: deploy
concurrency: deploymment

on:
  release:
    types: [published]

jobs:

  config: 
    runs-on: ubuntu-latest
    outputs: 
      tag: ${{ steps.version.outputs.TAG }}
      stage: ${{ steps.version.outputs.STAGE }}
    steps: 
      - name: Setup Version Variables
        id: version
        run: |
          echo TAG=$(echo ${{ github.ref }} | sed -e "s/^refs\/tags\///")>> $GITHUB_OUTPUT
          echo STAGE=${{ github.sha }} | cut -c 1-20 >> $GITHUB_OUTPUT
  deploy: 
    needs: config
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install dependencies
        run: npm ci      
      - name: Deploy Stage ${{ needs.config.outputs.stage}}
        run: |
          npm run serverless deploy -- --stage ${{ needs.config.outputs.stage}}
      - name: Determine new versions
        id: versions
        run: |
          echo VERSIONS=$(aws ssm get-parameter --name fnd-api-s2-versions --query "Parameter.Value" --output text | jq '.  += [ { tag: "${{ needs.config.outputs.tag }}", stage: "${{ needs.config.outputs.stage }}" }] | unique')  >> $GITHUB_OUTPUT
      - name: Store updated versions in SSM param
        run: |
          aws ssm put-parameter --name fnd-api-s2-versions --overwrite --value '${{ steps.versions.outputs.VERSIONS }}'
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Apply instrastructure changes
        run: |
          npm run terraform -- init
          npm run terraform -- apply --auto-approve
          npm run terraform -- output