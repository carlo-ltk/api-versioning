name: remove

on:
  workflow_dispatch

jobs: 

  config: 
    runs-on: ubuntu-latest
    outputs: 
      tag: ${{ steps.tag.outputs.TAG }}
      stage: ${{ steps.stage.outputs.STAGE }}
    
    steps: 
      - name: Identify tag
        id: tag
        run: |
          echo TAG=$(echo ${{ github.ref }} | sed -e "s/^refs\/tags\///")>> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check existence of the version and fetch the associated stage
        id: stage
        run: | 
          echo STAGE=$(aws ssm get-parameter --name fnd-api-s2-versions --query "Parameter.Value" --output text | jq -e  '.[] | select(.tag == "${{ steps.tag.outputs.TAG }}") | .stage') >> $GITHUB_OUTPUT

      - name: Check STAGE variable
        if: steps.stage.outputs.STAGE  == null
        run: |
           echo ${{ steps.stage.outputs.STAGE }}
           exit 1

  remove: 
    runs-on: ubuntu-latest
    needs: config

    steps: 
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Install dependencies
        run: npm ci
      - name: Remove Stage ${{ needs.config.outputs.stage}}
        run: |
          npm run serverless deploy -- --stage ${{ needs.config.outputs.stage }}
      - name: Determine new versions
        id: versions
        run: |
          echo VERSIONS=$(aws ssm get-parameter --name fnd-api-s2-versions --query "Parameter.Value" --output text | jq '.  del(.[] | select(.tag == "${{ needs.config.outputs.tag }}"))'  >> $GITHUB_OUTPUT
      - name: Store updated versions in SSM param
        run: |
          aws ssm put-parameter --name fnd-api-s2-versions --overwrite --value '${{ steps.versions.outputs.VERSIONS }}'
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      - name: Apply instrastructure changes
        run: |
          npm run terraform -- init
          npm run terraform -- apply --auto-approve
          npm run terraform -- output

      







